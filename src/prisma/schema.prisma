datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  role           Role      @default(USER)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  orders         Order[]
  reviews        Review[]
  accounts       Account[]
}

enum Role {
  USER
  ADMIN
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Order {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId
  userId         String            @db.ObjectId
  amount         Float
  currency       String
  status         String
  deliveryStatus String?
  createDate     DateTime          @default(now())
  paymentItentId String            @unique
  products       CartProductType[]
  address        Address?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type CartProductType {
  id          String
  name        String
  description String
  category    String
  quantity    Int
  price       Float
  image       String
}

type Address {
  city        String
  country     String
  line1       String
  postal_code String
  state       String
}

model Product {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Float
  category    String
  inStock     Boolean    @default(true)
  image       String
  reviews     Review[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  productId   String   @db.ObjectId
  rating      Int
  comment     String
  createdDate DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}
